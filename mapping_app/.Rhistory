setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>% addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) %>%
addLegend(map = ep, position = "bottomleft", labels = ~labels, acolors = ~palette, opacity = 1)
multi
}
if (length(langs) > 1){
map <- subset(map, lang %in% langs)
map@data$label <- paste0(map@data$name)
labels <- distinct(map@data, label) %>% .$label
colors <- distinct(map@data, colors) %>% .$colors
palette <- colors
multi <- leaflet(map) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>% addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) %>%
addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
multi
}
colors
langs
map <- subset(map, lang %in% langs)
map@data$label <- paste0(map@data$name)
map@data$label
map <- subset(map, lang %in% langs)
map@data
map <- subset(map, lang %in% langs)
map@data
langs
langs = c("koi", "yrk")
langs
sel <- subset(map, lang %in% langs)
single <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>%
addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name)
single
sel <- subset(map, lang %in% langs)
sel
sel@data$label <- paste0(sel@data$name)
sel@data$label
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
if (is.null(langs)) {
empty <- leaflet() %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles()
empty
}
if (length(langs) == 1) {
sel <- subset(map, lang %in% langs)
single <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>%
addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name)
single
}
if (length(langs) > 1){
sel <- subset(map, lang %in% langs)
sel@data$label <- paste0(sel@data$name)
labels <- distinct(map@data, label) %>% .$label
colors <- distinct(map@data, colors) %>% .$colors
palette <- colors
multi <- leaflet(map) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>% addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) %>%
addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
multi
}
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
if (is.null(langs)) {
empty <- leaflet() %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles()
empty
}
if (length(langs) == 1) {
sel <- subset(map, lang %in% langs)
single <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>%
addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name)
single
}
if (length(langs) > 1){
sel <- subset(map, lang %in% langs)
sel@data$label <- paste0(sel@data$name)
labels <- distinct(sel@data, label) %>% .$label
colors <- distinct(sel@data, colors) %>% .$colors
palette <- colors
multi <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>% addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) %>%
addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
multi
}
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
if (is.null(langs)) {
empty <- leaflet() %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles()
empty
}
if (length(langs) == 1) {
sel <- subset(map, lang %in% langs)
single <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>%
addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name)
single
}
if (length(langs) > 1){
sel <- subset(map, lang %in% langs)
sel@data$label <- paste0(sel@data$name)
labels <- distinct(sel@data, label) %>% .$label
colors <- distinct(sel@data, colors) %>% .$colors
palette <- colors
multi <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>% addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) %>%
addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
multi
}
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
create_leaflet("yrk")
map <- readRDS("basemap.rds")
create_leaflet("yrk")
create_leaflet("koi")
create_leaflet("ket")
create_leaflet("ket")
map
map@data
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
map <- readRDS("basemap.rds")
if (is.null(langs)) {
empty <- leaflet() %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles()
empty
}
if (length(langs) == 1) {
sel <- subset(map, lang %in% langs)
single <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>%
addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name)
single
}
if (length(langs) > 1){
sel <- subset(map, lang %in% langs)
sel@data$label <- paste0(sel@data$name)
labels <- distinct(sel@data, label) %>% .$label
colors <- distinct(sel@data, colors) %>% .$colors
palette <- colors
multi <- leaflet(sel) %>%
setView(lng = 90, lat = 60, zoom = 3) %>%
addTiles() %>% addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) %>%
addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
multi
}
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
create_leaflet()
create_leaflet("koi")
create_leaflet("koi")
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
map <- readRDS("basemap.rds")
subset(map, lang %in% langs)
m <- leaflet(map) %>% setView(lng = 90, lat = 60, zoom = 3) %>%
addProviderTiles("MapQuestOpen.Aerial") %>%
addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
m
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
create_leaflet("koi")
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
map <- readRDS("basemap.rds")
map <- subset(map, lang %in% langs)
m <- leaflet(map) %>% setView(lng = 90, lat = 60, zoom = 3) %>%
addProviderTiles("MapQuestOpen.Aerial") %>%
addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
m
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
create_leaflet("koi")
create_leaflet("koi", "tat")
create_leaflet(c("koi", "tat"))
create_leaflet()
create_leaflet()
map <- subset(map, lang %in% langs)
map <- readRDS("basemap.rds")
map <- subset(map, lang %in% langs)
langs = "kpv"
langs = "koi"
map <- subset(map, lang %in% langs)
plot(map)
m <- leaflet() %>% setView(lng = 90, lat = 60, zoom = 3) %>%
addProviderTiles("MapQuestOpen.Aerial")
m
a <- addPolygons(data = map, weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
a <- m %>% addPolygons(data = map, weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
a
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
map <- readRDS("basemap.rds")
map <- subset(map, lang %in% langs)
m <- leaflet() %>% setView(lng = 90, lat = 60, zoom = 3) %>%
addProviderTiles("MapQuestOpen.Aerial")
m
a <- m %>% addPolygons(data = map, weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
a
p <- a %>% addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
map <- readRDS("basemap.rds")
map <- subset(map, lang %in% langs)
m <- leaflet() %>% setView(lng = 90, lat = 60, zoom = 3) %>%
addProviderTiles("MapQuestOpen.Aerial")
m
a <- m %>% addPolygons(data = map, weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
a
p <- a %>% addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
p
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
create_leaflet("koi")
map <- readRDS("basemap.rds")
map <- subset(map, lang %in% langs)
m <- leaflet() %>% setView(lng = 90, lat = 60, zoom = 3) %>%
addProviderTiles("MapQuestOpen.Aerial")
m
a <- m %>% addPolygons(data = map, weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
a
p <- a %>% addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
p
library(rgdal)
library(plyr)
library(dplyr)
library(maptools)
library(leaflet)
# The files in folder geojson are generated from shapefiles with script shp2geojson.sh Now there are all shapefiles, one
# should think about some smarter way to specify which languages one wants to map. Of course one could write a small function
# which takes the names of the files as an argument. This is maybe a good idea, as it could be even very easy to have that as
# a Shiny application...
create_leaflet <- function(langs = c("dlg-all", "evn-all", "ket", "koi-j", "koi", "sel", "tat-sib", "xas", "yrk")) {
# source("reparse_basemap.R")
#
#         if (read_again == T){
#                 reparse_basemap()
#         }
#
#         ## Maybe in a Shiny app it is performance-wise better to read the map-variable elsewhere.
#
#         if (env != "shiny") {
#
#         map <- readRDS("basemap.rds")
#
#         }
map <- readRDS("basemap.rds")
map <- subset(map, lang %in% langs)
m <- leaflet() %>% setView(lng = 90, lat = 60, zoom = 3) %>%
addProviderTiles("MapQuestOpen.Aerial")
m
a <- m %>% addPolygons(data = map, weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 0.8, popup = ~name)
a
#        p <- a %>% addLegend(map = ep, position = "bottomleft", labels = ~labels, colors = ~palette, opacity = 1)
#        p
}
## The same with other tiles
# m <- leaflet(ready_map) %>% setView(lng = 90, lat = 60, zoom = 3) %>% addProviderTiles('CartoDB.Positron') %>%
# addPolygons(weight = 2, fillColor = ~colors, opacity = 0, fillOpacity = 1, popup = ~name) addLegend(map = m, position =
# 'bottomleft', colors = ~palette, labels = ~labels, opacity = 1) ## OpenTopoMap m <- leaflet(ready_map) %>% setView(lng = 90,
# lat = 60, zoom = 3) %>% addProviderTiles('MapQuestOpen.Aerial') %>% addPolygons(weight = 2, fillColor = ~colors, opacity =
# 0, fillOpacity = 0.8, popup = ~name) addLegend(map = m, position = 'bottomleft', colors = ~palette, labels = ~labels,
# opacity = 1)
create_leaflet()
create_leaflet(langs = "koi")
create_leaflet(langs = "tat")
create_leaflet(langs = c("tat", "koi"))
shiny::runApp()
map <- readRDS("basemap.rds")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
